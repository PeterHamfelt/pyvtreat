[{"fullname": "vtreat", "modulename": "vtreat", "qualname": "", "type": "module", "doc": "<p>This<a href=\"https://github.com/WinVector/pyvtreat\">https://github.com/WinVector/pyvtreat</a> is the Python version of the vtreat data preparation system\n(also available as an R package<a href=\"https://winvector.github.io/vtreat/\">https://winvector.github.io/vtreat/</a>.</p>\n\n<p>vtreat is a DataFrame processor/conditioner that prepares\nreal-world data for supervised machine learning or predictive modeling\nin a statistically sound manner.</p>\n\n<p>vtreat takes an input DataFrame\nthat has a specified column called \"the outcome variable\" (or \"y\")\nthat is the quantity to be predicted (and must not have missing\nvalues).  Other input columns are possible explanatory variables\n(typically numeric or categorical/string-valued, these columns may\nhave missing values) that the user later wants to use to predict \"y\".\nIn practice such an input DataFrame may not be immediately suitable\nfor machine learning procedures that often expect only numeric\nexplanatory variables, and may not tolerate missing values.</p>\n\n<p>To solve this, vtreat builds a transformed DataFrame where all\nexplanatory variable columns have been transformed into a number of\nnumeric explanatory variable columns, without missing values.  The\nvtreat implementation produces derived numeric columns that capture\nmost of the information relating the explanatory columns to the\nspecified \"y\" or dependent/outcome column through a number of numeric\ntransforms (indicator variables, impact codes, prevalence codes, and\nmore).  This transformed DataFrame is suitable for a wide range of\nsupervised learning methods from linear regression, through gradient\nboosted machines.</p>\n\n<p>The idea is: you can take a DataFrame of messy real world data and\neasily, faithfully, reliably, and repeatably prepare it for machine\nlearning using documented methods using vtreat.  Incorporating\nvtreat into your machine learning workflow lets you quickly work\nwith very diverse structured data.</p>\n\n<p>Worked examples can be found <code>here</code><a href=\"https://github.com/WinVector/pyvtreat/tree/master/Examples\">https://github.com/WinVector/pyvtreat/tree/master/Examples</a>.</p>\n\n<p>For more detail please see here: <code>arXiv:1611.09477\nstat.AP</code><a href=\"https://arxiv.org/abs/1611.09477\">https://arxiv.org/abs/1611.09477</a> (the documentation describes the R version,\nhowever all of the examples can be found worked in Python \n<code>here</code><a href=\"https://github.com/WinVector/pyvtreat/tree/master/Examples/vtreat_paper1\">https://github.com/WinVector/pyvtreat/tree/master/Examples/vtreat_paper1</a>).</p>\n\n<p>vtreat is available\nas a <code>Python/Pandas package</code><a href=\"https://github.com/WinVector/vtreat\">https://github.com/WinVector/vtreat</a>,\nand also as an <code>R package</code><a href=\"https://github.com/WinVector/vtreat\">https://github.com/WinVector/vtreat</a>.</p>\n"}, {"fullname": "vtreat.cross_plan", "modulename": "vtreat.cross_plan", "qualname": "", "type": "module", "doc": "<p>Basic cross validation methods</p>\n"}, {"fullname": "vtreat.cross_plan.CrossValidationPlan", "modulename": "vtreat.cross_plan", "qualname": "CrossValidationPlan", "type": "class", "doc": "<p>Data splitting plan</p>\n"}, {"fullname": "vtreat.cross_plan.CrossValidationPlan.__init__", "modulename": "vtreat.cross_plan", "qualname": "CrossValidationPlan.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "vtreat.cross_plan.CrossValidationPlan.split_plan", "modulename": "vtreat.cross_plan", "qualname": "CrossValidationPlan.split_plan", "type": "function", "doc": "<p>Build a cross validation plan for the given parameters.</p>\n\n<p>:param n_rows: (optional) number of input rows\n:param k_folds: (optional) number of folds we want\n:param data: (optional) explanatory variables\n:param y: (optional) dependent variable\n:return: cross validation plan (list of dictionaries)</p>\n", "parameters": ["self", "n_rows", "k_folds", "data", "y"], "funcdef": "def"}, {"fullname": "vtreat.cross_plan.KWayCrossPlanYStratified", "modulename": "vtreat.cross_plan", "qualname": "KWayCrossPlanYStratified", "type": "class", "doc": "<p>K-way cross validation plan, attempting an even y-distribution</p>\n"}, {"fullname": "vtreat.cross_plan.KWayCrossPlanYStratified.__init__", "modulename": "vtreat.cross_plan", "qualname": "KWayCrossPlanYStratified.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "vtreat.cross_plan.KWayCrossPlanYStratified.split_plan", "modulename": "vtreat.cross_plan", "qualname": "KWayCrossPlanYStratified.split_plan", "type": "function", "doc": "<p>:param n_rows: required, number of rows\n:param k_folds: required, number of cross-folds\n:param data: not used\n:param y: required, outcomes to stratify on\n:return:</p>\n", "parameters": ["self", "n_rows", "k_folds", "data", "y"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils", "modulename": "vtreat.stats_utils", "qualname": "", "type": "module", "doc": "<p>util for basic statistical steps</p>\n"}, {"fullname": "vtreat.stats_utils.our_corr_score", "modulename": "vtreat.stats_utils", "qualname": "our_corr_score", "type": "function", "doc": "<p>Compute Pearson correlation. Case-out some corner cases.</p>\n\n<p>:param y_true: truth values\n:param y_pred: predictions\n:return: (pearson r, significance)</p>\n", "parameters": ["y_true", "y_pred"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils.est_deviance", "modulename": "vtreat.stats_utils", "qualname": "est_deviance", "type": "function", "doc": "<p>Estimate the deviance</p>\n\n<p>:param y: truth values\n:param est: predictions\n:param epsilon: how close to get to 0 and 1\n:return: deviance estimate</p>\n", "parameters": ["y", "est", "epsilon"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils.sklearn_solve_logistic", "modulename": "vtreat.stats_utils", "qualname": "sklearn_solve_logistic", "type": "function", "doc": "<p>Single variable logistic regression.\nAssumes special cases of solve_logistic_regression already eliminated.</p>\n\n<p>:param y: dependent variable\n:param x: explanatory variable\n:param regularization:\n:return: model predictions</p>\n", "parameters": ["y", "x", "regularization"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils.solve_logistic_regression", "modulename": "vtreat.stats_utils", "qualname": "solve_logistic_regression", "type": "function", "doc": "<p>Single variable logistic regression. Returns predictions, corner\ncases removed.</p>\n\n<p>:param y: dependent variable\n:param x: explanatory variable\n:return: predictions</p>\n", "parameters": ["y", "x"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils.our_pseudo_R2", "modulename": "vtreat.stats_utils", "qualname": "our_pseudo_R2", "type": "function", "doc": "<p>Return the logistic pseudo-R2</p>\n\n<p>:param y_true: dependent variable\n:param y_pred: explanatory variable\n:return: (pseudo-R2, significance)</p>\n", "parameters": ["y_true", "y_pred"], "funcdef": "def"}, {"fullname": "vtreat.transform", "modulename": "vtreat.transform", "qualname": "", "type": "module", "doc": "<p>base class for user transforms</p>\n"}, {"fullname": "vtreat.transform.UserTransform", "modulename": "vtreat.transform", "qualname": "UserTransform", "type": "class", "doc": "<p>base class for user transforms, should express taking a set of k inputs to k outputs independently</p>\n"}, {"fullname": "vtreat.transform.UserTransform.__init__", "modulename": "vtreat.transform", "qualname": "UserTransform.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "treatment"], "funcdef": "def"}, {"fullname": "vtreat.transform.UserTransform.fit", "modulename": "vtreat.transform", "qualname": "UserTransform.fit", "type": "function", "doc": "<p>sklearn API</p>\n\n<p>:param X: explanatory values\n:param y: dependent values\n:return: self for method chaining</p>\n", "parameters": ["self", "X", "y"], "funcdef": "def"}, {"fullname": "vtreat.transform.UserTransform.transform", "modulename": "vtreat.transform", "qualname": "UserTransform.transform", "type": "function", "doc": "<p>:param X: explanatory values\n:return: transformed data</p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.transform.UserTransform.fit_transform", "modulename": "vtreat.transform", "qualname": "UserTransform.fit_transform", "type": "function", "doc": "<p>:param X: explanatory values\n:param y: dependent values\n:return: transformed data</p>\n", "parameters": ["self", "X", "y"], "funcdef": "def"}, {"fullname": "vtreat.util", "modulename": "vtreat.util", "qualname": "", "type": "module", "doc": "<p>Utility functions for vtreat</p>\n"}, {"fullname": "vtreat.util.safe_to_numeric_array", "modulename": "vtreat.util", "qualname": "safe_to_numeric_array", "type": "function", "doc": "<p>Convert array to numeric. Note, will parse strings (due to numpy)!</p>\n\n<p>:param x: array to process\n:return: numeric array</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.can_convert_v_to_numeric", "modulename": "vtreat.util", "qualname": "can_convert_v_to_numeric", "type": "function", "doc": "<p>check if non-empty vector can convert to numeric</p>\n\n<p>:param x:\n:return: True if can convert to numeric, false otherwise (no string parsing).</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.is_bad", "modulename": "vtreat.util", "qualname": "is_bad", "type": "function", "doc": "<p>For numeric vector x, return logical vector of positions that are null, NaN, infinite.</p>\n\n<p>:param x:\n:return:</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.numeric_has_range", "modulename": "vtreat.util", "qualname": "numeric_has_range", "type": "function", "doc": "<p>Check if a numeric vector has numeric range.</p>\n\n<p>:param x: vector to check\n:return: True if max &gt; min values in vector, else False.</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.summarize_column", "modulename": "vtreat.util", "qualname": "summarize_column", "type": "function", "doc": "<p>Summarize column to a non-missing scalar.</p>\n\n<p>:param x: a vector/Series or column of numbers\n:param fn: summarize function (such as numpy.mean), only passed non-bad positions\n:return: scalar float summary of the non-None positions of x (otherwise 0)</p>\n", "parameters": ["x", "fn"], "funcdef": "def"}, {"fullname": "vtreat.util.characterize_numeric", "modulename": "vtreat.util", "qualname": "characterize_numeric", "type": "function", "doc": "<p>compute na count, min,max,mean of a numeric vector</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.get_unique_value_count", "modulename": "vtreat.util", "qualname": "get_unique_value_count", "type": "function", "doc": "<p>compute how many unique values in list-x</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.grouped_by_x_statistics", "modulename": "vtreat.util", "qualname": "grouped_by_x_statistics", "type": "function", "doc": "<p>compute some grouped by x vector summaries of numeric y vector (no missing values in y)</p>\n", "parameters": ["x", "y"], "funcdef": "def"}, {"fullname": "vtreat.util.score_variables", "modulename": "vtreat.util", "qualname": "score_variables", "type": "function", "doc": "<p>score the linear relation of variables to outcome</p>\n", "parameters": ["cross_frame", "variables", "outcome", "is_classification"], "funcdef": "def"}, {"fullname": "vtreat.util.check_matching_numeric_frames", "modulename": "vtreat.util", "qualname": "check_matching_numeric_frames", "type": "function", "doc": "<p>Check if two numeric pandas.DataFrame s are identical.  assert if not\n:param res:\n:param expect:\n:param tol: numeric tolerance.\n:return: None</p>\n", "parameters": ["res", "expect", "tol"], "funcdef": "def"}, {"fullname": "vtreat.util.unique_items_in_order", "modulename": "vtreat.util", "qualname": "unique_items_in_order", "type": "function", "doc": "<p>Return de-duplicated list of items in order they are in supplied array.</p>\n\n<p>:param x: vector to inspect\n:return: list</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.clean_string", "modulename": "vtreat.util", "qualname": "clean_string", "type": "function", "doc": "<p>Replace common symbols with column-name safe alternatives.</p>\n\n<p>:param s: incoming string\n:return: string</p>\n", "parameters": ["s"], "funcdef": "def"}, {"fullname": "vtreat.util.build_level_codes", "modulename": "vtreat.util", "qualname": "build_level_codes", "type": "function", "doc": "<p>Pick level names for a set of levels.</p>\n\n<p>:param incoming_column_name:\n:param levels:\n:return:</p>\n", "parameters": ["incoming_column_name", "levels"], "funcdef": "def"}, {"fullname": "vtreat.util.hash_data_frame", "modulename": "vtreat.util", "qualname": "hash_data_frame", "type": "function", "doc": "<p>Get a hash code representing a data frame.</p>\n\n<p>:param d: data frame\n:return: hash code as a string</p>\n", "parameters": ["d"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api", "modulename": "vtreat.vtreat_api", "qualname": "", "type": "module", "doc": "<p>Define user visible vtreat API.</p>\n"}, {"fullname": "vtreat.vtreat_api.vtreat_parameters", "modulename": "vtreat.vtreat_api", "qualname": "vtreat_parameters", "type": "function", "doc": "<p>build a vtreat parameters dictionary, adding in user choices</p>\n\n<p>:param user_params: dictionary of user choices\n:return: dictionary of user and default choices</p>\n", "parameters": ["user_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.unsupervised_parameters", "modulename": "vtreat.vtreat_api", "qualname": "unsupervised_parameters", "type": "function", "doc": "<p>build a vtreat parameters dictionary for unsupervised tasks, adding in user choices</p>\n\n<p>:param user_params: dictionary of user choices\n:return: dictionary of user and default choices</p>\n", "parameters": ["user_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment", "type": "class", "doc": "<p>manage a treatment plan for a numeric outcome (regression)</p>\n"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.__init__", "type": "function", "doc": "<p>:param var_list: list or tuple of column names, if empty all non outcome and copy columns are used\n:param outcome_name: name of column containing dependent variable\n:param cols_to_copy: list or tuple of column names\n:param params: vtreat.vtreat_parameters()\n:param imputation_map: map of column names to custom missing imputation values or functions</p>\n", "parameters": ["self", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.merge_params", "type": "function", "doc": "<p>Merge user parameters, returns new parameters does not alter object.</p>\n\n<p>:param p:\n:return: merged parameters</p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.transform", "type": "function", "doc": "<p>Apply transform to data.</p>\n\n<p>:param X: data\n:return: transformed data</p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.fit_transform", "type": "function", "doc": "<p>fit_transform data, this is the way to fit with cross methods.</p>\n\n<p>:param X: explanatory values\n:param y: dependent values\n:param fit_params:\n:return: transformed data</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment", "type": "class", "doc": "<p>manage a treatment plan for a target outcome (binomial classification)</p>\n"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.__init__", "type": "function", "doc": "<p>:param var_list: list or tuple of column names, if empty all non outcome and copy columns are used\n:param outcome_name: name of column containing dependent variable\n:param outcome_target: value of outcome to consider \"positive\"\n:param cols_to_copy: list or tuple of column names\n:param params: vtreat.vtreat_parameters()\n:param imputation_map: map of column names to custom missing imputation values or functions</p>\n", "parameters": ["self", "var_list", "outcome_name", "outcome_target", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.merge_params", "type": "function", "doc": "<p>Merge user parameters, returns new parameters does not alter object.</p>\n\n<p>:param p:\n:return: merged parameters</p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.transform", "type": "function", "doc": "<p>Apply transform to data.</p>\n\n<p>:param X: data\n:return: transformed data</p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.fit_transform", "type": "function", "doc": "<p>fit_transform data, this is the way to fit with cross methods.</p>\n\n<p>:param X: explanatory values\n:param y: dependent values\n:param fit_params:\n:return: transformed data</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment", "type": "class", "doc": "<p>manage a treatment plan for a set of outcomes (multinomial classification)</p>\n"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.__init__", "type": "function", "doc": "<p>:param var_list: list or tuple of column names, if empty all non outcome and copy columns are used\n:param outcome_name: name of column containing dependent variable\n:param cols_to_copy: list or tuple of column names\n:param params: vtreat.vtreat_parameters()\n:param imputation_map: map of column names to custom missing imputation values or functions</p>\n", "parameters": ["self", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.merge_params", "type": "function", "doc": "<p>Merge user parameters, returns new parameters does not alter object.</p>\n\n<p>:param p:\n:return: merged parameters</p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.transform", "type": "function", "doc": "<p>Apply transform to data.</p>\n\n<p>:param X: data\n:return: transformed data</p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.fit_transform", "type": "function", "doc": "<p>fit_transform data, this is the way to fit with cross methods.</p>\n\n<p>:param X: explanatory values\n:param y: dependent values\n:param fit_params:\n:return: transformed data</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment", "type": "class", "doc": "<p>manage an unsupervised treatment plan</p>\n"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.__init__", "type": "function", "doc": "<p>:param var_list: list or tuple of column names, if empty all non copy columns are used\n:param cols_to_copy: list or tuple of column names\n:param params: vtreat.unsupervised_parameters()\n:param imputation_map: map of column names to custom missing imputation values or functions</p>\n", "parameters": ["self", "var_list", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.merge_params", "type": "function", "doc": "<p>Merge user parameters, returns new parameters does not alter object.</p>\n\n<p>:param p:\n:return: merged parameters</p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.transform", "type": "function", "doc": "<p>Apply transform to data.</p>\n\n<p>:param X: data\n:return: transformed data</p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.fit_transform", "type": "function", "doc": "<p>fit_transform data.</p>\n\n<p>:param X: explanatory values\n:param y: dependent values\n:param fit_params:\n:return: transformed data</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl", "modulename": "vtreat.vtreat_impl", "qualname": "", "type": "module", "doc": "<p>vtreat main implementation</p>\n"}, {"fullname": "vtreat.vtreat_impl.ready_data_frame", "modulename": "vtreat.vtreat_impl", "qualname": "ready_data_frame", "type": "function", "doc": "<p>Convert an array-like object to a data frame for processing.</p>\n\n<p>:param d: data frame like object to work with\n:return: dataframe with string-named columns</p>\n", "parameters": ["d"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.back_to_orig_type_data_frame", "modulename": "vtreat.vtreat_impl", "qualname": "back_to_orig_type_data_frame", "type": "function", "doc": "<p>Convert data frame back to ndarray if that was the original type.</p>\n\n<p>:param d: data frame\n:param orig_type: type of original object\n:return: converted result</p>\n", "parameters": ["d", "orig_type"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VarTransform", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform", "type": "class", "doc": "<p>Base class for vtreat transforms</p>\n"}, {"fullname": "vtreat.vtreat_impl.VarTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.__init__", "type": "function", "doc": "<p>:param incoming_column_name:\n:param derived_column_names:\n:param treatment:</p>\n", "parameters": ["self", "incoming_column_name", "derived_column_names", "treatment"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VarTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.transform", "type": "function", "doc": "<p>return a transformed data frame</p>\n\n<p>:rtype: pandas.DataFrame\n:param data_frame: incoming values\n:return: transformed values</p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform", "type": "class", "doc": "<p>Class for transforms that are a dictionary mapping of values</p>\n"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform.__init__", "type": "function", "doc": "<p>:param incoming_column_name:\n:param derived_column_name:\n:param treatment:\n:param code_book: Pandas dataframe mapping values to impact codes</p>\n", "parameters": ["self", "incoming_column_name", "derived_column_name", "treatment", "code_book"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform.transform", "type": "function", "doc": "<p>return a transformed data frame</p>\n\n<p>:rtype: pandas.DataFrame\n:param data_frame: incoming values\n:return: transformed values</p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform", "type": "class", "doc": "<p>Class for transforms that are a y-aware dictionary mapping of values</p>\n"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform.__init__", "type": "function", "doc": "<p>:param incoming_column_name: name of incoming column\n:param derived_column_name: name of incoming column\n:param treatment: name of treatment\n:param code_book: pandas data frame mapping values to codes\n:param refitter: function to re-fit\n:param extra_args: extra args for fit_* functions\n:param params: configuration control parameters</p>\n", "parameters": ["self", "incoming_column_name", "derived_column_name", "treatment", "code_book", "refitter", "extra_args", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform", "type": "class", "doc": "<p>Class for numeric column cleaner.</p>\n"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform.__init__", "type": "function", "doc": "<p>:param incoming_column_name:\n:param replacement_value:</p>\n", "parameters": ["self", "incoming_column_name", "replacement_value"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform.transform", "type": "function", "doc": "<p>return a transformed data frame</p>\n\n<p>:rtype: pandas.DataFrame\n:param data_frame: incoming values\n:return: transformed values</p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform", "type": "class", "doc": "<p>Class for missing value indicator.</p>\n"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform.__init__", "type": "function", "doc": "<p>:param incoming_column_name:\n:param derived_column_name:</p>\n", "parameters": ["self", "incoming_column_name", "derived_column_name"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform.transform", "type": "function", "doc": "<p>return a transformed data frame</p>\n\n<p>:rtype: pandas.DataFrame\n:param data_frame: incoming values\n:return: transformed values</p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_clean_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_clean_code", "type": "function", "doc": "<p>Fit numeric clean column imputation transform</p>\n\n<p>:param incoming_column_name: name of column\n:param x: training values for column\n:param params: control parameter dictionary\n:param imputation_map: per-column map to imputation strategies or values\n:return: transform</p>\n", "parameters": ["incoming_column_name", "x", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_regression_impact_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_regression_impact_code", "type": "function", "doc": "<p>Fit regression impact code transform</p>\n\n<p>:param incoming_column_name:\n:param x: training explanatory values\n:param y: training dependent values\n:param extra_args: optional extra arguments for fit_ methods\n:param params: control parameter dictionary\n:return:</p>\n", "parameters": ["incoming_column_name", "x", "y", "extra_args", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_regression_deviation_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_regression_deviation_code", "type": "function", "doc": "<p>Fit regression deviation code transform</p>\n\n<p>:param incoming_column_name:\n:param x: training explanatory values\n:param y: training dependent values\n:param extra_args: optional extra arguments for fit_ methods\n:param params: control parameter dictionary\n:return:</p>\n", "parameters": ["incoming_column_name", "x", "y", "extra_args", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_binomial_impact_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_binomial_impact_code", "type": "function", "doc": "<p>Fit categorical impact code.</p>\n\n<p>:param incoming_column_name:\n:param x: training explanatory values\n:param y: training dependent values\n:param extra_args: required extra arguments for fit_ methods\n:param params: control parameter dictionary\n:return:</p>\n", "parameters": ["incoming_column_name", "x", "y", "extra_args", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform", "type": "class", "doc": "<p>Class for indicator codes</p>\n"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.__init__", "type": "function", "doc": "<p>:param incoming_column_name:\n:param derived_column_names:\n:param levels: leves we are encoding to indicators\n:param sparse_indicators: if True use sparse data structure</p>\n", "parameters": ["self", "incoming_column_name", "derived_column_names", "levels", "sparse_indicators"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.transform", "type": "function", "doc": "<p>return a transformed data frame</p>\n\n<p>:rtype: pandas.DataFrame\n:param data_frame: incoming values\n:return: transformed values</p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_indicator_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_indicator_code", "type": "function", "doc": "<p>Fit indicator codes</p>\n\n<p>:param incoming_column_name:\n:param x: training explanatory variables\n:param min_fraction:\n:param sparse_indicators:\n:return:</p>\n", "parameters": ["incoming_column_name", "x", "min_fraction", "sparse_indicators"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_prevalence_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_prevalence_code", "type": "function", "doc": "<p>Fit a prevalence code</p>\n\n<p>:param incoming_column_name:\n:param x: training explanatory values\n:return:</p>\n", "parameters": ["incoming_column_name", "x"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_numeric_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_numeric_outcome_treatment", "type": "function", "doc": "<p>Fit set of treatments in a regression situation.</p>\n\n<p>:param X: training explanatory values\n:param y: training dependent values\n:param var_list: list of dependent variable names, if empty all non outcome and copy columns are used\n:param outcome_name: name for outcome column\n:param cols_to_copy: list of columns to copy to output\n:param params: control parameter dictionary\n:param imputation_map: per-column map to imputation strategies or values\n:return: transform plan</p>\n", "parameters": ["X", "y", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_binomial_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_binomial_outcome_treatment", "type": "function", "doc": "<p>:param X: training explanatory values\n:param y: training dependent values\n:param outcome_target: dependent value to consider positive or in class\n:param var_list: list of variables to process, if empty all non outcome and copy columns are used\n:param outcome_name: name for outcome column\n:param cols_to_copy: list of columns to copy to output\n:param params: control parameter dictionary\n:param imputation_map: per-column map to imputation strategies or values\n:return: transform plan</p>\n", "parameters": ["X", "y", "outcome_target", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_multinomial_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_multinomial_outcome_treatment", "type": "function", "doc": "<p>Fit a variable treatment for multinomial outcomes.</p>\n\n<p>:param X: training explanatory values\n:param y: training dependent values\n:param var_list: list of variables to process, if empty all non outcome and copy columns are used\n:param outcome_name: name for outcome column\n:param cols_to_copy: list of columns to copy to output\n:param params: control parameter dictionary\n:param imputation_map: per-column map to imputation strategies or values\n:return:</p>\n", "parameters": ["X", "y", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_unsupervised_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_unsupervised_treatment", "type": "function", "doc": "<p>Fit a data treatment in the unsupervised case.</p>\n\n<p>:param X: training explanatory values\n:param var_list: list of variables to process, if empty all non copy columns are used\n:param outcome_name: name for outcome column\n:param cols_to_copy: list of columns to copy to output\n:param params: control parameter dictionary\n:param imputation_map: per-column map to imputation strategies or values\n:return:</p>\n", "parameters": ["X", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.pre_prep_frame", "modulename": "vtreat.vtreat_impl", "qualname": "pre_prep_frame", "type": "function", "doc": "<p>Create a copy of pandas.DataFrame x restricted to col_list union cols_to_copy with col_list - cols_to_copy\nconverted to only string and numeric types.  New pandas.DataFrame has trivial indexing.  If col_list\nis empty it is interpreted as all columns.</p>\n\n<p>:param x:\n:param col_list:\n:param cols_to_copy:\n:param cat_cols:\n:return:</p>\n", "parameters": ["x", "col_list", "cols_to_copy", "cat_cols"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.cross_patch_refit_y_aware_cols", "modulename": "vtreat.vtreat_impl", "qualname": "cross_patch_refit_y_aware_cols", "type": "function", "doc": "<p>Re fit the y-aware columns according to cross plan.\nClears out refitter_ values to None.\nAssumes each y-aware variable produces one derived column.</p>\n\n<p>:param x: explanatory values\n:param y: dependent values\n:param res: transformed frame to patch results into, altered\n:param plan: fitting plan\n:param cross_plan: cross validation plan\n:return: no return, res is altered in place</p>\n", "parameters": ["x", "y", "res", "plan", "cross_plan"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.cross_patch_user_y_aware_cols", "modulename": "vtreat.vtreat_impl", "qualname": "cross_patch_user_y_aware_cols", "type": "function", "doc": "<p>Re fit the user y-aware columns according to cross plan.\nAssumes each y-aware variable produces one derived column.</p>\n\n<p>:param x: explanatory values\n:param y: dependent values\n:param res: transformed frame to patch results into, altered\n:param params: control parameter dictionary\n:param cross_plan: cross validation plan\n:return: no return, res altered in place</p>\n", "parameters": ["x", "y", "res", "params", "cross_plan"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.score_plan_variables", "modulename": "vtreat.vtreat_impl", "qualname": "score_plan_variables", "type": "function", "doc": "<p>Quality score variables to build up score frame.</p>\n\n<p>:param cross_frame: cross transformed explanatory variables\n:param outcome: dependent variable\n:param plan: treatment plan dictionary\n:param params: control parameter dictionary\n:param is_classification: logical, if True classification if False regression\n:return: score frame</p>\n", "parameters": ["cross_frame", "outcome", "plan", "params", "is_classification"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.pseudo_score_plan_variables", "modulename": "vtreat.vtreat_impl", "qualname": "pseudo_score_plan_variables", "type": "function", "doc": "<p>Build a score frame look-alike for unsupervised case.</p>\n\n<p>:param cross_frame: cross transformed explanatory variables\n:param plan:\n:param params: control parameter dictionary\n:return: score frame</p>\n", "parameters": ["cross_frame", "plan", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment", "type": "class", "doc": "<p>Class for variable treatments, implements much of the sklearn pipeline/transformer\nAPI. https://sklearn-template.readthedocs.io/en/latest/user_guide.html#transformer</p>\n"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.__init__", "type": "function", "doc": "<p>:param var_list: variables we intend to encode, empty means all\n:param outcome_name: column name of outcome\n:param outcome_target: outcome column value we consider in class or True\n:param cols_to_copy: columns to not process, but copy over\n:param params: control and configuration parameters\n:param imputation_map: per column imputation strategies or values</p>\n", "parameters": ["self", "var_list", "outcome_name", "outcome_target", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.check_column_names", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.check_column_names", "type": "function", "doc": "<p>Check that none of the column names we are working with are non-unique.\nAlso check variable columns are all present (columns to copy and outcome allowed to be missing).</p>\n\n<p>:param col_names:\n:return: None, raises exception if there is a problem</p>\n", "parameters": ["self", "col_names"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.clear", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.clear", "type": "function", "doc": "<p>reset state</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_result_restriction", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_result_restriction", "type": "function", "doc": "<p>accessor</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.set_result_restriction", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.set_result_restriction", "type": "function", "doc": "<p>setter</p>\n", "parameters": ["self", "new_vars"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.merge_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.merge_params", "type": "function", "doc": "<p>merge in use parameters</p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit", "type": "function", "doc": "<p>sklearn fit.</p>\n\n<p>:param X: explanatory variables\n:param y: (optional) dependent variable\n:param fit_params:\n:return: self (for method chaining)</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit_transform", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit_transform", "type": "function", "doc": "<p>sklearn fit_transform, correct way to trigger cross methods.</p>\n\n<p>:param X: explanatory variables\n:param y: (optional) dependent variable\n:param fit_params:\n:return: transformed data</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.transform", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.transform", "type": "function", "doc": "<p>sklearn transform</p>\n\n<p>:param X: explanatory variables\n:return: transformed data</p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_params", "type": "function", "doc": "<p>vtreat exposes a subset of controls as tunable parameters, users can choose this set\nby specifying the tunable_params list in object construction parameters</p>\n\n<p>:param deep: ignored\n:return: dict of tunable parameters</p>\n", "parameters": ["self", "deep"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.set_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.set_params", "type": "function", "doc": "<p>vtreat exposes a subset of controls as tunable parameters, users can choose this set\nby specifying the tunable_params list in object construction parameters</p>\n\n<p>:param params:\n:return: self (for method chaining)</p>\n", "parameters": ["self", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit_predict", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit_predict", "type": "function", "doc": "<p>Alias for fit_transform()</p>\n\n<p>:param X: explanatory variables\n:param y: (optional) dependent variable\n:param fit_params:\n:return: transformed data</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.predict", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.predict", "type": "function", "doc": "<p>Alias for transform.</p>\n\n<p>:param X: explanatory variables\n:return: transformed data</p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.predict_proba", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.predict_proba", "type": "function", "doc": "<p>Alias for transform.</p>\n\n<p>:param X: explanatory variables\n:return: transformed data</p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_feature_names", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_feature_names", "type": "function", "doc": "<p>Get list of produced feature names.</p>\n\n<p>:param input_features: Optional, restrict to these features\n:return:</p>\n", "parameters": ["self", "input_features"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.perform_transform", "modulename": "vtreat.vtreat_impl", "qualname": "perform_transform", "type": "function", "doc": "<p>Transform a data frame.</p>\n\n<p>:param x: data to be transformed.\n:param transform: transform\n:param params: control parameter dictionary\n:return: new data frame</p>\n", "parameters": ["x", "transform", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.limit_to_appropriate_columns", "modulename": "vtreat.vtreat_impl", "qualname": "limit_to_appropriate_columns", "type": "function", "doc": "<p>Limit down to appropriate columns.</p>\n\n<p>:param res:\n:param transform:\n:return:</p>\n", "parameters": ["res", "transform"], "funcdef": "def"}]